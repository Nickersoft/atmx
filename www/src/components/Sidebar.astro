---
import Default from "@astrojs/starlight/components/Sidebar.astro";
import type { Props } from "@astrojs/starlight/props";

import { cn } from "@/lib/utils";

import { getCollection } from "astro:content";

type Item = Props["sidebar"][number];

const { sidebar, ...props } = Astro.props;

function updateLinks(items: Item[], child: boolean = false) {
  for (const link of items) {
    if (link.type === "link") {
      link.attrs.class = cn(
        "p-2 hover:!text-muted-foreground text-muted-foreground overflow-hidden rounded-md",
        (link.isCurrent || link.attrs["data-top-level"]) &&
          "bg-muted text-foreground hover:bg-muted hover:!text-foreground",
        child && link.isCurrent && "!font-normal",
        "active:opacity-50 transition-all duration-150",
      );
    } else {
      link.entries = updateLinks(link.entries, true);
    }
  }
  return items;
}

const links = await getCollection("docs");

const topLevelLinks: Item[] = links
  .filter((link) => !link.id.includes("/"))
  .sort((a, b) => (a.data.sidebar?.order ?? 0) - (b.data.sidebar?.order ?? 0))
  .map(({ data, slug }) => {
    return {
      type: "link",
      label: data.title,
      href: slug,
      isCurrent: Astro.url.pathname === slug,
      badge: undefined,
      attrs: {
        "data-top-level": true,
      },
    };
  });

const updatedSidebar = updateLinks([...topLevelLinks, ...sidebar]);
---

<Default {...props} sidebar={updatedSidebar} />

<style is:global>
  #starlight__sidebar {
    @apply border-0;

    .top-level {
      & > li {
        @apply mt-4;
      }

      li {
        @apply border-0 py-px;
      }
    }

    .mobile-preferences {
      @apply px-4;
    }

    summary {
      @apply !py-2;
    }
  }
</style>
